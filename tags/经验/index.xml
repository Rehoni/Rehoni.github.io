<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>经验 on Rehoni | 罗皓</title>
    <link>/tags/%E7%BB%8F%E9%AA%8C/</link>
    <description>Recent content in 经验 on Rehoni | 罗皓</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 09 Jul 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="/tags/%E7%BB%8F%E9%AA%8C/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>别心急写代码</title>
      <link>/cn/2024/0709%E5%88%AB%E5%BF%83%E6%80%A5%E5%86%99%E4%BB%A3%E7%A0%81/</link>
      <pubDate>Tue, 09 Jul 2024 00:00:00 +0000</pubDate>
      <guid>/cn/2024/0709%E5%88%AB%E5%BF%83%E6%80%A5%E5%86%99%E4%BB%A3%E7%A0%81/</guid>
      <description>别心急写代码&#xA;发现有的人在遇到问题时会有这么一个思维：「我会一个什么东西，我要把这个套在现在的问题上来解决」，一上来就吭哧吭哧地写代码。&#xA;我觉得好的方式是，正如我之前说过的，退一步，分析当前问题关键是什么，寻找对应的最佳解决方案。代码是最简单的东西，花时间计划清楚，再开始写，就不会出现中途发现设计问题需要推翻重做的尴尬，也能帮助你在写的时候思路清晰、不出 bug。&#xA;我想把这个问题归咎于「中国式教育」，习惯用固定的解题方式去套问题，容易陷进思维定式，也没法解决一些很新颖或者「老师没讲」的内容。当然这也跟知识的广度有关，当一个人拥有很多解决问题的手段，他就不会着急用手头仅有的一两个方法去试。&#xA;说的倒也没错，但落脚点只是编码者的层面，有些肤浅。站在其他角度想想，相对于“别心急写代码”的议题，我觉得可以依据反编码的原则，作为一个开发，应当把编码作为最最麻烦的事情，遵守非必要不编码的原则。在了解完问题关键和场景之后，作为一名开发，应当试想一下完全不开发该怎么解决问题，问题是不是可以不用解决，是不是可以通过管理手段来规避——从根源上消除此问题。&#xA;思维定式是一方面，另一方面是，要拔高自己的视野，站在更高的位置、或者是站在更全面更系统的层面，去考虑怎么解决问题。</description>
    </item>
    <item>
      <title>this is a question, not a problem.</title>
      <link>/cn/2024/0622%E6%80%9D%E7%BB%B4%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Sat, 22 Jun 2024 00:00:00 +0000</pubDate>
      <guid>/cn/2024/0622%E6%80%9D%E7%BB%B4%E6%A8%A1%E5%BC%8F/</guid>
      <description>this is a question, not a problem.&#xA;当我把遇到的困难看成是学习的过程，好像有了全新的角度，谁能第一次就找到正确答案呢？&#xA;当工作不顺、内耗的时候， 这个课题叫“ “如何接纳不够好的自己”；&#xA;当孩子玩玩具，懒得写作业的时候，这个课题叫“如何平衡需要做的事情和想做的事情”&#xA;当陷入一段消耗的关系，这个课题叫:&amp;ldquo;在亲密关系中如何及时止损？&amp;rdquo;&#xA;这种思维方式从根本上讲&#xA;把自己当成一个学习者，遇到任何困难，都会问问自己&#xA;这次的课题叫什么？&#xA;我学会的解法有几种?&#xA;这是最优解吗？还有其他解法吗？我可以从哪里获得？</description>
    </item>
    <item>
      <title>幸福者退让原则</title>
      <link>/cn/2024/0611%E5%B9%B8%E7%A6%8F%E8%80%85%E9%80%80%E8%AE%A9%E5%8E%9F%E5%88%99/</link>
      <pubDate>Tue, 11 Jun 2024 00:00:00 +0000</pubDate>
      <guid>/cn/2024/0611%E5%B9%B8%E7%A6%8F%E8%80%85%E9%80%80%E8%AE%A9%E5%8E%9F%E5%88%99/</guid>
      <description>幸福者退让原则是指如果你的生活家庭幸福美满，在外面遇见有人无理挑衅、易怒暴躁，你千万不要与对方过多纠缠，要懂得退让。 因为你可能不知道对方在此之前经历了什么，如果再加上与你的争吵可能会成为导火索，对方在「情绪失控」情况下有极大可能会做出伤害你或者你家人的行为。</description>
    </item>
    <item>
      <title>web3和国企</title>
      <link>/cn/2023/web3%E5%92%8C%E5%9B%BD%E4%BC%81/</link>
      <pubDate>Tue, 30 Apr 2024 00:00:00 +0000</pubDate>
      <guid>/cn/2023/web3%E5%92%8C%E5%9B%BD%E4%BC%81/</guid>
      <description>来自这个 帖子&#xA;关于 web3 的选择：&#xA;web3 当下无法打通需求端，当前都是叙事和投机。虽然我持续看好 web3 ，但是它会走上 AI 的道路，需要几十年来沉淀，才可能打通需求端。 &amp;ndash; 你是否愿意在一个可能有前景，但是在你职业生命周期内没法打通需求端的行业工作？做一个前人栽树后人乘凉的前人，虽然也可以挣到钱。&#xA;当前全球经济形势下行，加之 web3 没有新的技术突破打通需求端，这个行业已经和 web2 一样趋于饱和。你的年纪、web3 行业的经验不具备优势。 &amp;ndash; 你是否愿意在一个市场规模小，且人员饱和的行业冒险？&#xA;web3 依然快速迭代中，业务、技术日新月异，需要学习的东西比 web2 还多。我天天都在危机感中学习 web3 知识，当下依然无法找到 web3 工作，因为需求小，经验少(2 年 web3 经验)。 &amp;ndash; 你是否愿意在一个天天都需要学习，但你的行业经验却不及别人的行业工作？&#xA;数据赛道在 web3 是极其拥挤的赛道。 web3 和 web2 是两个行业，web3 的规模又比 web2 小许多，且处于饱和态。 远程工作不适合所有人，需要自律和能够自我解决社交问题(即使你是孤独症患者，也需要一定程度的社交) 你心目中能够让你自豪的项目是什么样的？ web3 的团队一般都是十几人，顶级团队也就几十人。项目规模不会很大，用户数量不会很多。遇到投机和叙事的项目概率较大，毕竟没法打通需求端。 老板是否值得信任，仅凭一面之缘来判断不可靠，也和老板的谈吐，背景没多大关系。经历过藤校背景的老板，这些家伙的道德观可没那么高。老板是否值得信任这条，完全是不确定因素。 关于全球远程工作，如果是华人团队，在国内遇到的问题，和在国外遇到问题都会一致。华人清楚华人的情况，华人对待华人和对待非华人是两套标准，从薪资就可以知道，除非给你 global pay 。如果是外企，那么英语是必须。 当前经济形势下，学习可能没那么有用了，都是屠龙之技。关键是你的履历是否高度匹配用人方。 关于国企的选择：&#xA;你是什么性格的人，是否可以通过调节个人心态，降低工作场景下精神上的诉求，去探求工作之外的精神满足？&amp;ndash; 比如打游戏或者钻研编程技术。 当下的环境，无论是国企还是 web3 公司，再求职这两样选择都不具备优势，因为供大于求。且年纪一旦超过 35 岁，许多机会直接关闭。 你很理想化。我也很理想化，每次找工作，都找自己喜欢的，而不是给的薪资高的，导致薪资大概是我这级别人员的的 1/2(按脉脉上的数值来计算) 。但是回到现实，未来大几率是持续下行的长经济周期，现金为王。决定裸辞之前，我已经做好就地退休的准备，保持低欲望、低消费。 在国企谈不上躺平，跟着流程来，做好本质工作。抛开互联网的工作态度，调节心态。 在国企，你的精神状态怎么样，是否会致郁，如果还行，请为了金钱忍着。虽然国企不稳定，但是当前大环境下，加之你的年龄、web3 经验，都没有优势，选钱多的，提高金钱端的抗风险能力，而非职业规划端的抗风险能力。职业规划在经济下行期间没有意义，因为无论选那条路，最终都是没得选择。 </description>
    </item>
    <item>
      <title>表达能力的思考</title>
      <link>/cn/2023/%E8%A1%A8%E8%BE%BE%E8%83%BD%E5%8A%9B/</link>
      <pubDate>Wed, 18 Oct 2023 00:00:00 +0000</pubDate>
      <guid>/cn/2023/%E8%A1%A8%E8%BE%BE%E8%83%BD%E5%8A%9B/</guid>
      <description>表达能力 表达能力不强 ！= 性格内向&#xA;是一种技能。可以练出来，不要习得性无助。&#xA;小技巧 牢记时间顺序。（意料之外没准备的情况&#xA;过去，现在，未来&#xA;顺藤摸瓜。（聊天尴尬陷入尴尬冷场时找话题&#xA;聊天不是审讯，要根据对方回答内容联想到关联的词组&#xA;记得说名字。（不要滥用第三人称&#xA;不要直视对方眼睛。（表达能力不够强的情况下&#xA;盯着对方的鼻子，而不是眼睛，可以避免get到对面眼神变化而造成的分心&#xA;根本上解决 有效表达和胡说八道之间的区别在于是否有逻辑&#xA;逻辑 = 约定俗成的顺序&#xA;讲故事 = 时间顺序 讲道理 = 层级顺序 1.一句话概括核心观点 2.让别人理解到你打算从哪方面论证观点 3.具体论证重点：实践，实践，实践</description>
    </item>
    <item>
      <title>Windows同时输出相同音源</title>
      <link>/cn/2021/windows%E8%BE%93%E5%87%BA%E7%9B%B8%E5%90%8C%E9%9F%B3%E6%BA%90/</link>
      <pubDate>Wed, 13 Oct 2021 00:00:00 +0000</pubDate>
      <guid>/cn/2021/windows%E8%BE%93%E5%87%BA%E7%9B%B8%E5%90%8C%E9%9F%B3%E6%BA%90/</guid>
      <description>同时输出相同音源 需求：和老婆一起玩双人同屏游戏（以撒的结合:抗生），但需要带上蓝牙耳机玩。&#xA;设备：2个蓝牙耳机、1个蓝牙接收器、1台Win10系统电脑。&#xA;通过关键字搜索出一个解决方案（Output audio to multiple devices in Windows 10）&#xA;在我电脑上测试无法实现。&#xA;但顺着思路，找到了虚拟音频软件（Virtual Audio Cable）。&#xA;经测试，使用Virtual Audio Cable软件可以实现以上需求。&#xA;安装软件，连接蓝牙设备。 运行Audio Repeater (MME)，Wave in 选择Line 1，Wave Out选择你的蓝牙设备1，Total buffer设置为50，点start。 不关再运行一次Audio Repeater (MME)，也就是双开软件，Wave in 选择Line 1，Wave Out选择你的蓝牙设备2，Total buffer设置为50。点start。&#xA;其实如果只是看剧的话，可以用MPC-BE播放器，选项-音频里可以设置多重输出，选择你的两个蓝牙设备即可，效果还更好。&#xA;Windows快捷键 🚈 Windows桌面和虚拟桌面 贴靠窗口：Win +左/右&amp;gt; Win +上/下&amp;gt;窗口可以变为1/4大小放置在屏幕4个角落&#xA;切换窗口：Alt + Tab&#xA;任务视图：Win + Tab(松开键盘界面不会消失)&#xA;创建新的虚拟桌面：Win + Ctrl + D&#xA;关闭当前虚拟桌面：Win + Ctrl + F4&#xA;切换虚拟桌面：Win + Ctrl +左/右&#xA;输入法 中英文符号切换：ctrl+.&#xA;表情：Win+.或;&#xA;字体 Fira Code 连字 https://github.</description>
    </item>
    <item>
      <title>moneywiz3预算调整</title>
      <link>/cn/2020/moneywiz3%E9%A2%84%E7%AE%97%E8%B0%83%E6%95%B4/</link>
      <pubDate>Tue, 01 Sep 2020 00:00:00 +0000</pubDate>
      <guid>/cn/2020/moneywiz3%E9%A2%84%E7%AE%97%E8%B0%83%E6%95%B4/</guid>
      <description>moneywiz3 预算调整技巧 学习也大的视频，预算操作的一些技巧。&#xA;一个小技巧 Cleared-&amp;gt;Pending-&amp;gt;Forecast&#xA;已确认Cleared&#xA;待定中Pending&#xA;未来发生Forecast（取自schedule的账目，如会员订阅、房租、话费、信用卡分期等每月固定支出）&#xA;建议勾选到Forecast&#xA;做预算的时候，勾选了Forecast的开支会被计入预算中，若不勾选，则到月末手动记录时可能会预算超支。&#xA;如对应项目总预算有220，月初开始，每月月末有一笔猫粮开支为30。&#xA;勾选Forecast后，会扣除月末的这一笔开销，故预算已变为190。未勾选Forecast，则预算为220，会一直以为预算有220，而到月末再花这笔30的开支，容易超出预算到250。&#xA;三种方法调整预算 rollover，上月剩余预算结余到下月。实现不同月份之间的预算的平衡。&#xA;计划从2018年10月1日开始，每月餐饮预算为265。（假设之前预算都恰好用完）如果2019年9月餐饮支出为245，则结余20。那么2019年10月餐饮预算为285，加上上个月的结余。但是带来一个严重的问题：如果修改每月的餐饮计划预算，如从265修改到285，那么从2018年10月1日开始的每个月到当前日期的每月计划预算都会增加20，相当于总预算增加了20*n，并且通过rollover结余到这个月。而我们要的结果是从当月之后or仅当月。&#xA;微调 不断增加一点小数字，微调计划预算。&#xA;重启 直接重新设置预算，简单粗暴。&#xA;单次调整 carried balance，能够实现从总数上调整预算，即单次预算调整。</description>
    </item>
    <item>
      <title>编程学习的思考</title>
      <link>/cn/2023/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0%E7%9A%84%E6%80%9D%E8%80%83/</link>
      <pubDate>Tue, 01 Sep 2020 00:00:00 +0000</pubDate>
      <guid>/cn/2023/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0%E7%9A%84%E6%80%9D%E8%80%83/</guid>
      <description>总结一下：用力地啃好书。专心地做好项目。剩下的，时间会帮你搞定。&#xA;开始读书了&#xA;你就明白：你以往东拼西凑几十篇烂文才明白的事，书上那几页纸都写着，而且详细的很。&#xA;多找第三方开源&#xA;你就明白：原来工作摸鱼不是梦。&#xA;太随便用第三方&#xA;你就明白：某天需求一变，它兼顾不到，可以把你往死里坑，坑到你得去看源码。&#xA;学了OO, 熟悉了“设计模式”, 领悟了IoC和DI, 让我大概感觉到了程序应该有一些结构, 而不是简单的把逻辑用if-else写进去, 这是我感觉自己能力提高的第一次飞跃;&#xA;看SICP和CTM让我开始理解程序和编程到底是什么, 特别是对CTM里的最小表达力原则的理解, 这是我编程思想的第二次飞跃;&#xA;学了函数式编程思想为我打开了另外一个世界, 引导我去了解haskell, 去稍稍的学习了些category theory(这个是真的难&amp;hellip;), 这解放了我编程思想的另外一个纬度, 抽象能力有了质的提高(主要体现在generic programming的能力提高, 高级类型的灵活运用), 我开始有意识的去降低核心程序的&amp;quot;熵&amp;quot;(程序的可能性越多, 各种可能性的概率越均等, 熵越高), 使得程序更容易理解(熵越低信息含量越低则越容易理解), 而把系统的灵活性(比如状态, config等)隔离在核心逻辑之外(这样使得变化可以在一个地方, 比如系统setup时, 集中理解, 然后用理解的setup来很简单的推理核心逻辑在这种setup下会怎样运转), 这样就使得程序的核心复杂度更加接近于核心业务的复杂度(业务的熵是本质复杂度无法用调整程序结构的方法降低, 但是, 本质复杂度也是可以降低的, 请往下看), 但是又没有写死整个系统的灵活度; 这是第三次飞跃;&#xA;然而, 最大的飞跃是当我最终把重点从编程本身转移开来之后, 当我开始去看分布式系统算法, 去理解各种云服务的特性, 去深入了解我所工作的领域或者说业务, 去了解和我们组有关系的其他部门的业务, 去了解ML(由于业务相关); 去了解需求获取, 怎样拒绝不合理需求, 怎样调整和简化需求(降低业务本质复杂度的关键), 甚至创造合理需求，去了解测试, 监控, 部署, 构架, 运维, 项目规划和人员部署, 思考为什么junior SDE会犯错, 帮助mentor别人, 甚至开始关心组内的技术文化建设;&#xA;这是因为“编程是最重要也是最不重要的事”&#xA;这是因为编程作为把思维变为实现的这个循环的最后一步(然后写好的程序会成为新的思考输入和基础，开始新的一轮迭代开发)，它和一个项目一个系统的所有其他方面都息息相关：需求获取，问题抽象，测试，监控，部署，框架运用，系统间集成，灵活性，未来拓展性，易用性，系统健壮性，多版本实验性，高层业务决策等等，这使得编程变得无比重要(所有的一切都需要编程来最终落到实地)，也毫不重要(编程被所有其他一切所约束和指导)。能够支撑这些所有上层思考的程序才是“好程序”，能够支撑所有这些思考的程序员，才是好程序员。学好/学会编程这件事是把所有需要思考的东西都弄明白都学好之后的自然结果。而把这些思考留给别人，自己只做思维和程序的翻译器(区分创造者和工具人的关键)，根本无法写出好的程序来。这也是DDD(Domain Driven Design) 的精神之一 （关于DDD的精神，参见此文的最后一段， 阿莱克西斯：在做程序员的道路上，你掌握了什么概念或技术使你感觉自我提升突飞猛进？ ）&#xA;以上引用出自自学编程需要注意什么？&#xA;我觉得: 我们在积累技术能力的同时一定要开阔眼界, 这样才不会陷入一个&amp;quot;局部最优解&amp;quot; (随便逮着一个点都能开阔人类边界的天才除外); 眼界太窄以至于学了一点点东西就觉得自己&amp;quot;天下无敌&amp;quot;了, 是我们进步的大敌 (也是曾经是我最大的敌人);</description>
    </item>
  </channel>
</rss>
